---
title: FAQs
project: riak
version: 1.2+
document: cookbook
audience: beginner
keywords: [faq, cookbook, index]
---

Q: When upgrading Riak on a Redhat-based system, I get errors from "chcon", saying "can't apply partial context to unlabeled file".
  ```
  rpm -Uvh /tmp/riak-0.14.1-1.el5.x86_64.rpm 
  Preparing... ########################################### [100%] 
  1:riak ########################################### [100%] 
  chcon: can't apply partial context to unlabeled file /usr/lib64/riak/lib/ebloom-1.0.2/priv/ebloom_nifs.so 
  chcon: can't apply partial context to unlabeled file /usr/lib64/riak/lib/bitcask-1.1.5/priv/bitcask.so 
  chcon: can't apply partial context to unlabeled file /usr/lib64/riak/lib/runtime_tools-1.8.3/priv/lib/trace_file_drv.so 
  chcon: can't apply partial context to unlabeled file /usr/lib64/riak/lib/runtime_tools-1.8.3/priv/lib/trace_ip_drv.so 
  chcon: can't apply partial context to unlabeled file /usr/lib64/riak/lib/erlang_js-0.5.0/priv/erlang_js_drv.so 
  chcon: can't apply partial context to unlabeled file /usr/lib64/riak/lib/skerl-1.0.0/priv/skerl_nifs.so 
  chcon: can't apply partial context to unlabeled file /usr/lib64/riak/lib/crypto-1.6.4/priv/lib/crypto_drv.so
  ```
A:
  The "chcon" warning comes from necessary additions to the RPM packaging for cases where SELinux is enabled. You only receive the warning if SELinux is disabled while installing or was disabled when the last version was installed. It is safe to ignore.


Q: How can I automatically expire a key from Riak?
  I want to regularly purge items from Riak that are older than a certain timestamp, but MapReduce times out on large numbers of items. Can I expire data automatically?
A:
  If you're using Bitcask, the default storage backend, and you want items to expire at a consistent interval (assuming they are not updated), set the expiry_secs option in app.config. Items past this threshold will not be returned on get/fetch operations and will eventually be removed from disk by Bitcask's merging process.
  
  Example:
  
  ```erlang
  {bitcask, [
      {data_root, "data/bitcask"},
      {expiry_secs, 86400} %% Expire after a day
   ]}, 
  ```
  
  There is no limit on how large or small the expiry_secs setting can be as long as it is greater than 0. Please see the wiki for additional details on [configuring Bitcask](/Bitcask.html).


Q: What's the difference between 'leave' and 'remove'?
  I'm trying to remove a node from my cluster and it's unclear whether I should use riak-admin leave or riak-admin remove. What's the difference between them?
A: 
  The difference is two-fold:
  
  which node is being removed from the cluster, and
  whether the node is being removed forcefully.
  In normal conditions, you'll want to use 'riak-admin leave' in cases where the node you're removing is up and healthy. That command must be run on the machine where the node to be removed is running.
  
  In cases where the node you want to remove has been completely lost (for example, if the EC2 instance it was running on terminated), cannot be restarted, or is otherwise incapacitated, use 'riak-admin remove <nodename>'. This will tell the local node (not the one being removed), to remove the lost node from the ring and gossip the membership changes.
  
  In general, use 'leave' in all conditions except dire ones; in those dire situations, use 'remove'.
  
  Additional information:
  
  * 'riak-admin' Command Reference
  * How do I get a node to leave the cluster?
  * What happens after I run 'riak-admin leave'?

